"""
Originally generated by coderabbitai
https://www.coderabbit.ai/
"""

from __future__ import annotations

import subprocess
from pathlib import Path
from unittest.mock import MagicMock, patch

import pytest
import requests

from flogin import Pip
from flogin.errors import PipExecutionError, UnableToDownloadPip


@pytest.fixture
def temp_dir(tmp_path):
    lib_dir = tmp_path / "lib"
    lib_dir.mkdir()
    return lib_dir


@pytest.fixture
def pip(temp_dir):
    return Pip(temp_dir)


def test_libs_dir_property(temp_dir):
    pip = Pip(temp_dir)
    assert pip.libs_dir == temp_dir

    pip = Pip(str(temp_dir))
    assert pip.libs_dir == temp_dir

    pip = Pip()
    assert pip.libs_dir == Path("lib")


def test_libs_dir_invalid_path():
    with pytest.raises(ValueError, match="Directory Not Found"):
        Pip("nonexistent_dir")


@patch("requests.get")
def test_download_pip_success(mock_get, pip):
    mock_response = MagicMock()
    mock_response.content = b"mock pip content"
    mock_get.return_value = mock_response

    pip.download_pip()
    assert pip._pip_fp is not None
    assert pip._pip_fp.exists()

    # Cleanup
    pip.delete_pip()


@patch("requests.get")
def test_download_pip_http_error(mock_get, pip):
    mock_get.side_effect = requests.HTTPError()

    with pytest.raises(UnableToDownloadPip):
        pip.download_pip()


def test_delete_pip(pip):
    # Create a mock pip file
    temp_file = Path("temp_pip.pyz")
    temp_file.write_text("mock content")
    pip._pip_fp = temp_file

    pip.delete_pip()
    assert not temp_file.exists()


@patch("requests.get")
def test_context_manager(mock_get, pip):
    mock_response = MagicMock()
    mock_response.content = b"mock pip content"
    mock_get.return_value = mock_response

    with pip as pip:
        assert pip._pip_fp is not None
        assert pip._pip_fp.exists()

    assert not pip._pip_fp.exists()


@patch("subprocess.run")
def test_run_success(mock_run, pip):
    mock_process = MagicMock()
    mock_process.stdout = b"success output"
    mock_run.return_value = mock_process

    with patch("requests.get") as mock_get:
        mock_response = MagicMock()
        mock_response.content = b"mock pip content"
        mock_get.return_value = mock_response
        pip.download_pip()

    output = pip.run("install", "package")
    assert output == "success output"

    pip.delete_pip()


def test_run_without_download(pip):
    with pytest.raises(RuntimeError, match="Pip has not been installed"):
        pip.run("install", "package")


@patch("subprocess.run")
def test_run_pip_error(mock_run, pip):
    mock_run.side_effect = subprocess.CalledProcessError(
        1, [], output=b"", stderr=b"error"
    )

    # Mock pip download
    with patch("requests.get") as mock_get:
        mock_response = MagicMock()
        mock_response.content = b"mock pip content"
        mock_get.return_value = mock_response
        pip.download_pip()

    with pytest.raises(PipExecutionError):
        pip.run("install", "package")

    # Cleanup
    pip.delete_pip()


@patch("subprocess.run")
def test_install_packages(mock_run, pip):
    mock_process = MagicMock()
    mock_process.stdout = b"installed successfully"
    mock_run.return_value = mock_process

    # Mock pip download
    with patch("requests.get") as mock_get:
        mock_response = MagicMock()
        mock_response.content = b"mock pip content"
        mock_get.return_value = mock_response
        pip.download_pip()

    pip.install_packages("package1", "package2")

    # Verify correct command was called
    mock_run.assert_called_once()
    cmd_args = mock_run.call_args[0][0]
    assert "install" in cmd_args
    assert "package1" in cmd_args
    assert "package2" in cmd_args
    assert pip.libs_dir.as_posix() in cmd_args

    # Cleanup
    pip.delete_pip()


@patch("subprocess.run")
def test_ensure_installed(mock_run, pip):
    mock_process = MagicMock()
    mock_process.stdout = b"installed successfully"
    mock_run.return_value = mock_process

    # Mock pip download
    with patch("requests.get") as mock_get:
        mock_response = MagicMock()
        mock_response.content = b"mock pip content"
        mock_get.return_value = mock_response
        pip.download_pip()

    # Test package that needs installation
    with patch("builtins.__import__", side_effect=ImportError):
        result = pip.ensure_installed("nonexistent_package")
        assert result is True

    # Test already installed package
    with patch("builtins.__import__", return_value=None):
        result = pip.ensure_installed("existing_package")
        assert result is False

    # Cleanup
    pip.delete_pip()


@patch("subprocess.run")
def test_freeze(mock_run, pip):
    mock_process = MagicMock()
    mock_process.stdout = b"package1==1.0.0\npackage2==2.0.0"
    mock_run.return_value = mock_process

    # Mock pip download
    with patch("requests.get") as mock_get:
        mock_response = MagicMock()
        mock_response.content = b"mock pip content"
        mock_get.return_value = mock_response
        pip.download_pip()

    result = pip.freeze()
    assert result == ["package1==1.0.0", "package2==2.0.0"]

    # Cleanup
    pip.delete_pip()
